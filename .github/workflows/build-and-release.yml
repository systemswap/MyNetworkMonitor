name: Build & Release MyNetworkMonitor

on:
  push:
    branches:
      - master  # Passe den Branch an, falls deiner anders heißt

jobs:
  build-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Damit der vorherige Commit zum Versionsvergleich verfügbar ist

      - name: Compare AssemblyVersion
        id: version_check
        shell: pwsh
        run: |
          $file = "MyNetworkMonitor/AssemblyInfo.cs"

          $old = git show HEAD^:$file | Select-String "AssemblyVersion" | ForEach-Object {
              ($_ -split '"')[1]
          }
          $new = Get-Content $file | Select-String "AssemblyVersion" | ForEach-Object {
              ($_ -split '"')[1]
          }

          echo "Old version: $old"
          echo "New version: $new"

          if ($old -ne $new) {
            echo "changed=true" >> $env:GITHUB_OUTPUT
            echo "version=$new" >> $env:GITHUB_OUTPUT
          } else {
            echo "changed=false" >> $env:GITHUB_OUTPUT
          }

      - name: Setup MSBuild
        if: steps.version_check.outputs.changed == 'true'
        uses: microsoft/setup-msbuild@v1.1

      - name: Restore NuGet packages
        if: steps.version_check.outputs.changed == 'true'
        run: nuget restore MyNetworkMonitor.sln

      - name: Build solution (Debug)
        if: steps.version_check.outputs.changed == 'true'
        run: msbuild MyNetworkMonitor.sln /p:Configuration=Debug

      - name: Create ZIP from Debug build
        if: steps.version_check.outputs.changed == 'true'
        shell: pwsh
        id: zip_step
        run: |
          $zipName = "MyNetworkMonitor_v${{ steps.version_check.outputs.version }}.zip"
          Compress-Archive -Path MyNetworkMonitor\bin\Debug\* -DestinationPath $zipName
          echo "zipname=$zipName" >> $env:GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.version_check.outputs.changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version_check.outputs.version }}
          name: Release ${{ steps.version_check.outputs.version }}
          body: ${{ github.event.head_commit.message }}
          files: ${{ steps.zip_step.outputs.zipname }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
